#!/usr/bin/env node

/**
 * Module dependencies.
 */
const sticky = require('sticky-session');
const app = require('../app');
const debug = require('debug')('logroom-backend:server');
const http = require('http');
const cluster = require('cluster');
const io = require('../socket/socket-api').io;
const redisAdapter = require('socket.io-redis');
io.adapter(redisAdapter({ host: process.env.REDIS_HOST || 'localhost', port: process.env.REDIS_PORT || 6379 }));
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */


const server = http.createServer(app);
io.attach(server);

server.on('error', onError);

if (!sticky.listen(server, port)) {
  if (cluster.isMaster) {
    console.log(`Master server started on port ${port}`);
  } 
} else {
  console.log(`- Child server started on port ${port} case worker id=${cluster.worker.id}`);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
